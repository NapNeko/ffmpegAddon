name: Build FFmpeg and Node Addon

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    env:
      PREFIX: ${{ github.workspace }}/buildout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake build-essential pkg-config yasm nasm libtool git python3

      - name: Clone FFmpeg release/7.1 into ffmpeg_src
        run: |
          rm -rf ffmpeg_src
          git clone --depth 1 --branch release/7.1 https://github.com/FFmpeg/FFmpeg ffmpeg_src

      - name: Apply repository patches to ffmpeg_src (if any)
        run: |
          set -euo pipefail
          if compgen -G "patches/*.patch" > /dev/null; then
            echo "Applying patches to ffmpeg_src"
            mkdir -p ffmpeg_src
            cp -v patches/*.patch ffmpeg_src/ || true
            cd ffmpeg_src
            git config user.email "action@users.noreply.github.com"
            git config user.name "GitHub Actions"
            # try git am first
            if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
              echo "git am succeeded"
            else
              echo "git am failed; showing current patch and trying fallback"
              git am --show-current-patch=diff || true
              git status --porcelain --untracked-files=all || true
              # fallback: try applying patches with dos2unix then git apply
              if command -v dos2unix >/dev/null 2>&1; then
                dos2unix *.patch || true
              else
                sed -i 's/\r$//' *.patch || true
              fi
              # attempt git am again
              if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
                echo "git am succeeded after normalizing line endings"
              else
                echo "git am still failed; trying git apply --reject --whitespace=fix"
                if git apply --reject --whitespace=fix *.patch; then
                  echo "git apply succeeded"
                  # commit the results
                  git add -A
                  git commit -m "Apply patches (git apply fallback)" || true
                else
                  echo "git apply failed; dumping diagnostic info"
                  git am --abort || true
                  echo "--- failed patch diff ---"
                  git diff --no-prefix || true
                  echo "--- ls -la ---"
                  ls -la
                  exit 1
                fi
              fi
            fi
          else
            echo "No patches found in patches/"
          fi
        shell: bash

      - name: Configure & build static FFmpeg
        run: |
          chmod +x scripts/build_ffmpeg_linux.sh || true
          ./scripts/build_ffmpeg_linux.sh "$PREFIX"

      - name: Show installed libs
        run: ls -la "$PREFIX/lib" || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm deps
        run: npm ci

      - name: Configure Node addon (point to built FFmpeg)
        run: npx cmake-js configure -- -DFFMPEG_SOURCE_DIR="$PREFIX"

      - name: Build Node addon (cmake-js)
        run: npx cmake-js build --arch=x64 --runtime=node

      - name: Upload built addon
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-addon-linux
          path: |
            build/*
            Release/*
            buildout/lib

  build-windows:
    name: Build on Windows
    runs-on: windows-2022
    env:
      PREFIX: ${{ github.workspace }}\buildout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MSYS2 and required packages
        id: msys2
        uses: msys2/setup-msys2@v2
        with:
          cache: true
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-nodejs

      - name: Clone FFmpeg release/7.1 into ffmpeg_src
        run: |
          if (Test-Path ffmpeg_src) { Remove-Item -Recurse -Force ffmpeg_src }
          git clone --depth 1 --branch release/7.1 https://github.com/FFmpeg/FFmpeg ffmpeg_src

      - name: Build FFmpeg (MSYS2 + mingw64)
        env:
          MSYS2_LOCATION: ${{ steps.msys2.outputs.msys2-location }}
        shell: msys2 {0}
        run: |
          # Enter msys2/mingw64 environment and run FFmpeg build script
          cd "$(cygpath -u "$GITHUB_WORKSPACE")"
          echo "Using MSYS2 at: $MSYS2_LOCATION"
          chmod +x ./scripts/build_ffmpeg_mingw.sh || true
          ./scripts/build_ffmpeg_mingw.sh "$(cygpath -u "$PREFIX")"

      - name: Install npm deps (inside msys2)
        shell: msys2 {0}
        run: |
          cd "$(cygpath -u "$GITHUB_WORKSPACE")"
          # Ensure mingw64 bin is first in PATH so cmake/gcc from mingw are used
          export PATH="/mingw64/bin:$PATH"
          # Prefer the mingw-w64 toolchain explicitly by exporting CC/CXX
          export CC=/mingw64/bin/x86_64-w64-mingw32-gcc
          export CXX=/mingw64/bin/x86_64-w64-mingw32-g++
          echo "--- Diagnostics before npm ci ---"
          which node || true
          node --version || true
          which gcc || true
          gcc --version || true
          which cmake || true
          cmake --version || true
          which pkg-config || true
          pkg-config --version || true
          npm ci

      - name: Configure Node addon (point to built FFmpeg) and build
        shell: msys2 {0}
        run: |
          cd "$(cygpath -u "$GITHUB_WORKSPACE")"
          # Ensure mingw64 toolchain is first and force CC/CXX for cmake-js
          export PATH="/mingw64/bin:$PATH"
          export CC=/mingw64/bin/x86_64-w64-mingw32-gcc
          export CXX=/mingw64/bin/x86_64-w64-mingw32-g++
          echo "--- Diagnostics before cmake-js configure ---"
          which node || true
          node --version || true
          which gcc || true
          gcc --version || true
          which cmake || true
          cmake --version || true
          # Use MinGW Makefiles generator and explicitly point cmake-js at mingw compilers
          npx cmake-js configure -G "MinGW Makefiles" --cc /mingw64/bin/x86_64-w64-mingw32-gcc --cxx /mingw64/bin/x86_64-w64-mingw32-g++ -- -DFFMPEG_SOURCE_DIR="$(cygpath -u "$PREFIX")"
          npx cmake-js build --arch=x64 --runtime=node

      - name: Upload built addon
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-addon-windows
          path: |
            build\*
            Release\*
            buildout\lib

  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    env:
      PREFIX: ${{ github.workspace }}/buildout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies (Homebrew)
        run: |
          brew update
          brew install automake autoconf pkg-config yasm nasm libtool git python3

      - name: Clone FFmpeg release/7.1 into ffmpeg_src
        run: |
          rm -rf ffmpeg_src
          git clone --depth 1 --branch release/7.1 https://github.com/FFmpeg/FFmpeg ffmpeg_src

      - name: Apply repository patches to ffmpeg_src (if any) on macOS
        run: |
          set -euo pipefail
          if compgen -G "patches/*.patch" > /dev/null; then
            echo "Applying patches to ffmpeg_src"
            mkdir -p ffmpeg_src
            cp -v patches/*.patch ffmpeg_src/ || true
            cd ffmpeg_src
            git config user.email "action@users.noreply.github.com"
            git config user.name "GitHub Actions"
            if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
              echo "git am succeeded"
            else
              echo "git am failed; showing current patch and trying fallback"
              git am --show-current-patch=diff || true
              git status --porcelain --untracked-files=all || true
              sed -i '' -e $'s/\r$//' *.patch || true
              if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
                echo "git am succeeded after normalizing line endings"
              else
                echo "git am still failed; trying git apply --reject --whitespace=fix"
                if git apply --reject --whitespace=fix *.patch; then
                  echo "git apply succeeded"
                  git add -A
                  git commit -m "Apply patches (git apply fallback)" || true
                else
                  echo "git apply failed; dumping diagnostic info"
                  git am --abort || true
                  git diff --no-prefix || true
                  ls -la || true
                  exit 1
                fi
              fi
            fi
          else
            echo "No patches found in patches/"
          fi

      - name: Configure & build static FFmpeg
        run: |
          chmod +x scripts/build_ffmpeg_mac.sh || true
          ./scripts/build_ffmpeg_mac.sh "$PREFIX"

      - name: Show installed libs
        run: ls -la "$PREFIX/lib" || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm deps
        run: npm ci

      - name: Configure Node addon (point to built FFmpeg)
        run: npx cmake-js configure -- -DFFMPEG_SOURCE_DIR="$PREFIX"

      - name: Build Node addon (cmake-js)
        run: npx cmake-js build --arch=x64 --runtime=node

      - name: Upload built addon
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-addon-macos
          path: |
            build/*
            Release/*
            buildout/lib
