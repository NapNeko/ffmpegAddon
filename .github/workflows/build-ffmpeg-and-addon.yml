name: Build FFmpeg and Node Addon

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    env:
      PREFIX: ${{ github.workspace }}/buildout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake build-essential pkg-config yasm nasm libtool git python3

      - name: Clone FFmpeg release/7.1 into ffmpeg_src
        run: |
          rm -rf ffmpeg_src
          git clone --depth 1 --branch release/7.1 https://git.ffmpeg.org/ffmpeg.git ffmpeg_src

      - name: Apply repository patches to ffmpeg_src (if any)
        run: |
          set -euo pipefail
          if compgen -G "patches/*.patch" > /dev/null; then
            echo "Applying patches to ffmpeg_src"
            mkdir -p ffmpeg_src
            cp -v patches/*.patch ffmpeg_src/ || true
            cd ffmpeg_src
            git config user.email "action@users.noreply.github.com"
            git config user.name "GitHub Actions"
            # try git am first
            if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
              echo "git am succeeded"
            else
              echo "git am failed; showing current patch and trying fallback"
              git am --show-current-patch=diff || true
              git status --porcelain --untracked-files=all || true
              # fallback: try applying patches with dos2unix then git apply
              if command -v dos2unix >/dev/null 2>&1; then
                dos2unix *.patch || true
              else
                sed -i 's/\r$//' *.patch || true
              fi
              # attempt git am again
              if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
                echo "git am succeeded after normalizing line endings"
              else
                echo "git am still failed; trying git apply --reject --whitespace=fix"
                if git apply --reject --whitespace=fix *.patch; then
                  echo "git apply succeeded"
                  # commit the results
                  git add -A
                  git commit -m "Apply patches (git apply fallback)" || true
                else
                  echo "git apply failed; dumping diagnostic info"
                  git am --abort || true
                  echo "--- failed patch diff ---"
                  git diff --no-prefix || true
                  echo "--- ls -la ---"
                  ls -la
                  exit 1
                fi
              fi
            fi
          else
            echo "No patches found in patches/"
          fi
        shell: bash

      - name: Configure & build static FFmpeg
        run: |
          chmod +x scripts/build_ffmpeg_linux.sh || true
          ./scripts/build_ffmpeg_linux.sh "$PREFIX"

      - name: Show installed libs
        run: ls -la "$PREFIX/lib" || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm deps
        run: npm ci

      - name: Configure Node addon (point to built FFmpeg)
        run: npx cmake-js configure -- -DFFMPEG_SOURCE_DIR="$PREFIX"

      - name: Build Node addon (cmake-js)
        run: npx cmake-js build --arch=x64 --runtime=node

      - name: Upload built addon
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-addon-linux
          path: |
            build/*
            Release/*
            buildout/lib

  build-windows:
    name: Build on Windows (MSVC)
    runs-on: windows-2022
    env:
      PREFIX: ${{ github.workspace }}\buildout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MSYS2 and required packages
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-yasm
            mingw-w64-x86_64-nasm

      - name: Clone FFmpeg release/7.1 into ffmpeg_src
        run: |
          if (Test-Path ffmpeg_src) { Remove-Item -Recurse -Force ffmpeg_src }
          git clone --depth 1 --branch release/7.1 https://git.ffmpeg.org/ffmpeg.git ffmpeg_src

      - name: Apply repository patches to ffmpeg_src (if any) on Windows
        shell: msys2 {0}
        run: |
          set -euo pipefail
          shopt -s nullglob || true
          if compgen -G "patches/*.patch" > /dev/null; then
            echo "Applying patches to ffmpeg_src"
            mkdir -p ffmpeg_src
            cp -v patches/*.patch ffmpeg_src/ || true
            cd ffmpeg_src
            git config user.email "action@users.noreply.github.com"
            git config user.name "GitHub Actions"
            if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
              echo "git am succeeded"
            else
              echo "git am failed; showing current patch and trying fallback"
              git am --show-current-patch=diff || true
              git status --porcelain --untracked-files=all || true
              # Normalize line endings on Windows runner (use sed if dos2unix unavailable)
              if command -v dos2unix >/dev/null 2>&1; then
                dos2unix *.patch || true
              else
                sed -i 's/\r$//' *.patch || true
              fi
              if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
                echo "git am succeeded after normalizing line endings"
              else
                echo "git am still failed; trying git apply --reject --whitespace=fix"
                if git apply --reject --whitespace=fix *.patch; then
                  echo "git apply succeeded"
                  git add -A
                  git commit -m "Apply patches (git apply fallback)" || true
                else
                  echo "git apply failed; dumping diagnostic info"
                  git am --abort || true
                  git diff --no-prefix || true
                  ls -la || true
                  exit 1
                fi
              fi
            fi
          else
            echo "No patches found in patches/"
          fi

      - name: Build FFmpeg with MSVC via provided script (activate MSVC then MSYS2 bash)
        shell: pwsh
        run: |
          set -e
          # Convert Windows GITHUB_WORKSPACE to MSYS path if needed
          if ($env:GITHUB_WORKSPACE) {
            $win_pwd = $env:GITHUB_WORKSPACE
          } else {
            # fallback to current working directory (Windows style)
            $win_pwd = (pwd).Path
          }
          # Convert C:\... to /c/... for MSYS path
          $msys_pwd = $win_pwd -replace '^(?i:([A-Za-z])):', '/$1' -replace '\\','/'
          $msys_pwd = $msys_pwd.ToLower()
          Write-Host "MSYS_PWD = $msys_pwd"

          # Ensure script exists
          if (-not (Test-Path "$msys_pwd/scripts/build_ffmpeg_win.sh")) {
            Write-Host "ERROR: scripts/build_ffmpeg_win.sh not found in $msys_pwd";
            Get-ChildItem -Force $msys_pwd | Select-Object -First 50
            exit 2
          }

          # Try to locate vcvars64.bat using vswhere, then common install paths
          $vcvars = $null
          $vswhere = Join-Path ${env:ProgramFiles(x86)} 'Microsoft Visual Studio\Installer\vswhere.exe'
          Write-Host "DEBUG: ProgramFiles(x86) = ${env:ProgramFiles(x86)}"
          Write-Host "DEBUG: checking vswhere at: $vswhere"
          if (Test-Path $vswhere) {
            Write-Host "DEBUG: vswhere found, querying installationPath"
            $inst = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath 2>$null | Select-Object -First 1
            Write-Host "DEBUG: vswhere returned: $inst"
            if ($inst) { $candidate = Join-Path $inst 'VC\Auxiliary\Build\vcvars64.bat'; Write-Host "DEBUG: candidate vcvars from vswhere: $candidate"; if (Test-Path $candidate) { $vcvars = $candidate } }
          }
          # fallback common locations (print them for debugging)
          if (-not $vcvars) {
            $fallbacks = @(
              'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat',
              'C:\Program Files (x86)\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat',
              'C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvars64.bat',
              'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvars64.bat'
            )
            Write-Host "DEBUG: checking fallback vcvars candidates:"
            foreach ($p in $fallbacks) { Write-Host "  candidate: $p"; if (Test-Path $p) { Write-Host "  found: $p"; $vcvars = $p; break } }
          }

          if (-not $vcvars) {
            Write-Host "ERROR: Could not find vcvars64.bat. Ensure Visual Studio with C++ build tools is installed.";
            exit 3
          }
          Write-Host "Using vcvars: $vcvars"

          # print debug info for paths
          Write-Host "DEBUG: GITHUB_WORKSPACE = $env:GITHUB_WORKSPACE"
          Write-Host "DEBUG: win_pwd = $win_pwd"
          Write-Host "DEBUG: msys_pwd = $msys_pwd"

          # Ensure msys bash exists (msys2/setup-msys2 installs it at C:\msys64\usr\bin\bash.exe)
          $bash = 'C:\msys64\usr\bin\bash.exe'
          if (-not (Test-Path $bash)) {
            # try in PATH
            $bash = (Get-Command bash.exe -ErrorAction SilentlyContinue).Source
          }
          if (-not $bash) { Write-Host "ERROR: msys2 bash not found at C:\\msys64\\usr\\bin\\bash.exe and not in PATH"; exit 4 }

          # Call vcvars64 and then run MSYS2 bash in the same cmd session so cl.exe and environment are available to the build script
          $prefixEsc = $env:PREFIX -replace '\\','\\\\'
          # Use TEMP to store transient diagnostics
          $clHelp = '%TEMP%\\cl_help.txt'
          $envDump = '%TEMP%\\env_after_vcvars.txt'
          $ffbuildLog = "$win_pwd\\ffmpeg_src\\ffbuild\\config.log"

          # Build a cmd string that:
          #  - calls vcvars64.bat
          #  - records where cl.exe is and cl help output and environment variables
          #  - runs msys2 bash to execute the build script
          #  - on failure, prints the captured diagnostics and ffbuild/config.log (if present)
          $cmd = "cmd /V:ON /c `"call `"$vcvars`" x64 && echo === WHERE CL === && where cl.exe || echo where-cl-failed && echo === CL HELP === && cl.exe /? > $clHelp 2>&1 || echo cl-help-failed && echo === ENV AFTER VCVARS === && set > $envDump && `"$bash`" -lc 'cd \"$msys_pwd\" && chmod +x ./scripts/build_ffmpeg_win.sh || true && ./scripts/build_ffmpeg_win.sh \"$prefixEsc\"' || (echo BUILD FAILED && echo ==== DIAGNOSTICS: CL HELP ==== & type $clHelp & echo ==== DIAGNOSTICS: ENV AFTER VCVARS ==== & type $envDump & if exist \"$ffbuildLog\" (echo ==== ffbuild/config.log ==== & type \"$ffbuildLog\") & exit 1) && (echo BUILD SUCCEEDED)`"
          Write-Host "Running: $cmd"
          iex $cmd


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm deps
        run: npm ci

      - name: Configure Node addon (point to built FFmpeg)
        shell: msys2 {0}
        run: npx cmake-js configure -- -DFFMPEG_SOURCE_DIR="$PREFIX"

      - name: Build Node addon (cmake-js) on Windows
        shell: msys2 {0}
        run: npx cmake-js build --arch=x64 --runtime=node

      - name: Upload built addon
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-addon-windows
          path: |
            build\*
            Release\*
            buildout\lib
  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    env:
      PREFIX: ${{ github.workspace }}/buildout
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies (Homebrew)
        run: |
          brew update
          brew install automake autoconf pkg-config yasm nasm libtool git python3

      - name: Clone FFmpeg release/7.1 into ffmpeg_src
        run: |
          rm -rf ffmpeg_src
          git clone --depth 1 --branch release/7.1 https://git.ffmpeg.org/ffmpeg.git ffmpeg_src

      - name: Apply repository patches to ffmpeg_src (if any) on macOS
        run: |
          set -euo pipefail
          if compgen -G "patches/*.patch" > /dev/null; then
            echo "Applying patches to ffmpeg_src"
            mkdir -p ffmpeg_src
            cp -v patches/*.patch ffmpeg_src/ || true
            cd ffmpeg_src
            git config user.email "action@users.noreply.github.com"
            git config user.name "GitHub Actions"
            if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
              echo "git am succeeded"
            else
              echo "git am failed; showing current patch and trying fallback"
              git am --show-current-patch=diff || true
              git status --porcelain --untracked-files=all || true
              sed -i '' -e $'s/\r$//' *.patch || true
              if git am --3way --committer-date-is-author-date --signoff --keep-cr *.patch; then
                echo "git am succeeded after normalizing line endings"
              else
                echo "git am still failed; trying git apply --reject --whitespace=fix"
                if git apply --reject --whitespace=fix *.patch; then
                  echo "git apply succeeded"
                  git add -A
                  git commit -m "Apply patches (git apply fallback)" || true
                else
                  echo "git apply failed; dumping diagnostic info"
                  git am --abort || true
                  git diff --no-prefix || true
                  ls -la || true
                  exit 1
                fi
              fi
            fi
          else
            echo "No patches found in patches/"
          fi

      - name: Configure & build static FFmpeg
        run: |
          chmod +x scripts/build_ffmpeg_mac.sh || true
          ./scripts/build_ffmpeg_mac.sh "$PREFIX"

      - name: Show installed libs
        run: ls -la "$PREFIX/lib" || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install npm deps
        run: npm ci

      - name: Configure Node addon (point to built FFmpeg)
        run: npx cmake-js configure -- -DFFMPEG_SOURCE_DIR="$PREFIX"

      - name: Build Node addon (cmake-js)
        run: npx cmake-js build --arch=x64 --runtime=node

      - name: Upload built addon
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-addon-macos
          path: |
            build/*
            Release/*
            buildout/lib
