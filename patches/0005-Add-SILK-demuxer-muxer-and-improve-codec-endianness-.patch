From e321e6db53150383befe4df93c06b8613289aae9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E6=89=8B=E7=93=9C=E4=B8=80=E5=8D=81=E9=9B=AA?=
 <nanaeonn@outlook.com>
Date: Thu, 23 Oct 2025 14:03:35 +0800
Subject: [PATCH 5/7] Add SILK demuxer/muxer and improve codec endianness
 handling

Introduces new SILK demuxer (libavformat/silkdec.c) and muxer (libavformat/silkenc.c) for handling SILK audio streams. Updates silkdec.c and silkenc.c in libavcodec to improve endianness handling and buffer management, and refactors encoding/decoding logic for better compatibility and maintainability.
---
 libavcodec/silkdec.c  | 39 +++++++++++---------
 libavcodec/silkenc.c  | 82 +++++++++++++++++++++++++++----------------
 libavformat/silkdec.c | 59 +++++++++++++++++++++++++++++++
 libavformat/silkenc.c | 41 ++++++++++++++++++++++
 4 files changed, 175 insertions(+), 46 deletions(-)
 create mode 100644 libavformat/silkdec.c
 create mode 100644 libavformat/silkenc.c

diff --git a/libavcodec/silkdec.c b/libavcodec/silkdec.c
index f3b45cf8da..4163eddb91 100644
--- a/libavcodec/silkdec.c
+++ b/libavcodec/silkdec.c
@@ -41,20 +41,17 @@ static av_cold int silk_decode_init(AVCodecContext *avctx) {
 
 
 static void ffmpeg_silk_decode(const uint8_t* silk_data, int data_len, void (*callback)(void*, const uint8_t*, int), void* userdata) {
-    SKP_uint8 payload[MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES * (MAX_LBRR_DELAY + 1)] = {0};
-    SKP_uint8* payloadEnd;
-    SKP_int16 nBytesPerPacket[MAX_LBRR_DELAY + 1] = {0};
-    SKP_int16 nBytes = 0, totalLen = 0, len = 0;
-    SKP_int32 decSizeBytes = 0;
+    SKP_uint8 payload[MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES * (MAX_LBRR_DELAY + 1)];
+    SKP_uint8* payloadEnd = NULL, *payloadToDec = NULL;
+    SKP_int16 nBytesPerPacket[MAX_LBRR_DELAY + 1];
+    SKP_int32 remainPackets = 0;
+    SKP_int16 len, totalLen = 0, nBytes = 0;
+    SKP_int32 decSizeBytes;
     const uint8_t* psRead = silk_data;
     void* psDec = NULL;
-    SKP_SILK_SDK_DecControlStruct dec_control = {0};
-    int remainPackets = 0;
-    int frames = 0;
-    SKP_int16* outPtr = NULL;
-    SKP_int16 totBytes = 0;
+    SKP_SILK_SDK_DecControlStruct dec_control;
 
-    // 跳过 magic
+    // magic 检查
     if (memcmp(psRead, "\x02#!SILK_V3", 9) != 0) return;
     psRead += 9;
 
@@ -70,6 +67,9 @@ static void ffmpeg_silk_decode(const uint8_t* silk_data, int data_len, void (*ca
     for (int i = 0; i < MAX_LBRR_DELAY; i++) {
         nBytes = *(const SKP_int16*)psRead;
         psRead += sizeof(SKP_int16);
+#ifdef _SYSTEM_IS_BIG_ENDIAN
+        swap_endian(&nBytes, 1);
+#endif
         memcpy(payloadEnd, psRead, nBytes);
         psRead += nBytes;
         nBytesPerPacket[i] = nBytes;
@@ -78,10 +78,13 @@ static void ffmpeg_silk_decode(const uint8_t* silk_data, int data_len, void (*ca
     nBytesPerPacket[MAX_LBRR_DELAY] = 0;
 
     while (1) {
-        SKP_int16 out[(FRAME_LENGTH_MS * MAX_API_FS_KHZ << 1) * MAX_INPUT_FRAMES] = {0};
+        SKP_int16 out[(FRAME_LENGTH_MS * MAX_API_FS_KHZ << 1) * MAX_INPUT_FRAMES];
         if (remainPackets == 0) {
             nBytes = *(const SKP_int16*)psRead;
             psRead += sizeof(SKP_int16);
+#ifdef _SYSTEM_IS_BIG_ENDIAN
+            swap_endian(&nBytes, 1);
+#endif
             if (nBytes < 0 || psRead - silk_data >= data_len) {
                 remainPackets = MAX_LBRR_DELAY;
                 goto decode;
@@ -94,12 +97,13 @@ static void ffmpeg_silk_decode(const uint8_t* silk_data, int data_len, void (*ca
     decode:
         if (nBytesPerPacket[0] != 0) {
             nBytes = nBytesPerPacket[0];
+            payloadToDec = payload;
         }
-        outPtr = out;
+        SKP_int16* outPtr = out;
         totalLen = 0;
-        frames = 0;
+        int frames = 0;
         do {
-            SKP_Silk_SDK_Decode(psDec, &dec_control, 0, payload, nBytes, outPtr, &len);
+            SKP_Silk_SDK_Decode(psDec, &dec_control, 0, payloadToDec, nBytes, outPtr, &len);
             frames++;
             outPtr += len;
             totalLen += len;
@@ -109,8 +113,11 @@ static void ffmpeg_silk_decode(const uint8_t* silk_data, int data_len, void (*ca
                 frames = 0;
             }
         } while (dec_control.moreInternalDecoderFrames);
+#ifdef _SYSTEM_IS_BIG_ENDIAN
+        swap_endian(out, totalLen);
+#endif
         callback(userdata, (const uint8_t*)out, sizeof(SKP_int16) * totalLen);
-        totBytes = 0;
+        SKP_int16 totBytes = 0;
         for (int i = 0; i < MAX_LBRR_DELAY; i++) {
             totBytes += nBytesPerPacket[i + 1];
         }
diff --git a/libavcodec/silkenc.c b/libavcodec/silkenc.c
index 86ee842db6..a763f58c4d 100644
--- a/libavcodec/silkenc.c
+++ b/libavcodec/silkenc.c
@@ -52,19 +52,32 @@ static av_cold int silk_encode_init(AVCodecContext *avctx)
 
 static void ffmpeg_silk_encode(const uint8_t *pcm_data, int data_len, void (*callback)(void *, const uint8_t *, int), void *userdata)
 {
-    SKP_int16 in[FRAME_LENGTH_MS * MAX_API_FS_KHZ * MAX_INPUT_FRAMES] = {0};
-    SKP_uint8 payload[MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES] = {0};
+    SKP_int16 in[FRAME_LENGTH_MS * MAX_API_FS_KHZ * MAX_INPUT_FRAMES];
+    SKP_uint8 payload[MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES];
     SKP_int16 n_bytes;
     SKP_int32 enc_size_bytes, result;
-    const uint8_t *ps_read = pcm_data;
-    const uint8_t *ps_read_end = pcm_data + data_len;
-    void *ps_enc = NULL;
+    unsigned char* ps_read = (unsigned char*)pcm_data;
+    unsigned char* ps_read_end = (unsigned char*)pcm_data + data_len;
+    void* ps_enc = NULL;
 
     SKP_int32 api_fs_hz = SILK_SAMPLE_RATE;
-    SKP_int32 max_internal_fs_hz = 24000;
+    SKP_int32 max_internal_fs_hz = 0;
     SKP_int32 target_rate_bps = 24000;
     SKP_int32 smpls_since_last_packet, packet_size_ms = 20;
 
+    if (max_internal_fs_hz == 0) {
+        max_internal_fs_hz = 24000;
+        if (api_fs_hz < max_internal_fs_hz) {
+            max_internal_fs_hz = api_fs_hz;
+        }
+    }
+
+#if LOW_COMPLEXITY_ONLY
+    SKP_int32 complexity_mode = 0;
+#else
+    SKP_int32 complexity_mode = 2;
+#endif
+
     SKP_SILK_SDK_EncControlStruct enc_status = {0};
     SKP_SILK_SDK_EncControlStruct enc_control = {0};
 
@@ -74,50 +87,59 @@ static void ffmpeg_silk_encode(const uint8_t *pcm_data, int data_len, void (*cal
     enc_control.packetLossPercentage = 0;
     enc_control.useInBandFEC = 0;
     enc_control.useDTX = 0;
-    enc_control.complexity = 2;
-    enc_control.bitRate = target_rate_bps > 0 ? target_rate_bps : 0;
+    enc_control.complexity = complexity_mode;
+    enc_control.bitRate = (target_rate_bps > 0 ? target_rate_bps : 0);
 
     callback(userdata, (const uint8_t *)"\x02#!SILK_V3", 9);
 
     result = SKP_Silk_SDK_Get_Encoder_Size(&enc_size_bytes);
-    if (result)
-        return;
+    if (result) return;
     ps_enc = av_malloc(enc_size_bytes);
-    if (!ps_enc)
-        return;
+    if (!ps_enc) return;
     result = SKP_Silk_SDK_InitEncoder(ps_enc, &enc_status);
-    if (result)
-    {
+    if (result) {
         av_free(ps_enc);
         return;
     }
 
     smpls_since_last_packet = 0;
-    while (ps_read < ps_read_end)
-    {
-        size_t frame_size = 20 * api_fs_hz / 1000;
-        size_t realrd = frame_size * sizeof(SKP_int16);
-        if (realrd > (size_t)(ps_read_end - ps_read))
-        {
-            memset(in, 0, sizeof(in));
-            memcpy(in, ps_read, ps_read_end - ps_read);
-            ps_read += (ps_read_end - ps_read);
+    while (1) {
+        SKP_int32 frame_size_read_from_file_ms = 20;
+        if (ps_read - (unsigned char*)pcm_data >= data_len) {
+            break;
         }
-        else
-        {
+
+        size_t counter = frame_size_read_from_file_ms * api_fs_hz / 1000;
+        if (counter * sizeof(SKP_int16) > ps_read_end - ps_read) {
+            memset(in, 0x00, sizeof(in));
+            size_t realrd = (ps_read_end - ps_read);
+            memcpy(in, ps_read, realrd);
+            ps_read += realrd;
+        } else {
+            size_t realrd = counter * sizeof(SKP_int16);
             memcpy(in, ps_read, realrd);
             ps_read += realrd;
         }
 
+#ifdef _SYSTEM_IS_BIG_ENDIAN
+        SKP_int16 n_bytes_le;
+        swap_endian(in, counter);
+#endif
+
         n_bytes = MAX_BYTES_PER_FRAME * MAX_INPUT_FRAMES;
-        SKP_Silk_SDK_Encode(ps_enc, &enc_control, in, (SKP_int)frame_size, payload, &n_bytes);
+        SKP_Silk_SDK_Encode(ps_enc, &enc_control, in, (short)counter, payload, &n_bytes);
         packet_size_ms = 1000 * enc_control.packetSize / enc_control.API_sampleRate;
 
-        smpls_since_last_packet += (int)frame_size;
-        if (1000 * smpls_since_last_packet / api_fs_hz == packet_size_ms)
-        {
+        smpls_since_last_packet += (int)counter;
+        if (1000 * smpls_since_last_packet / api_fs_hz == packet_size_ms) {
+#ifdef _SYSTEM_IS_BIG_ENDIAN
+            n_bytes_le = n_bytes;
+            swap_endian(&n_bytes_le, 1);
+            callback(userdata, (void*)&n_bytes_le, sizeof(SKP_int16));
+#else
             callback(userdata, (const uint8_t *)&n_bytes, sizeof(SKP_int16));
-            callback(userdata, payload, n_bytes);
+#endif
+            callback(userdata, payload, sizeof(SKP_uint8) * n_bytes);
             smpls_since_last_packet = 0;
         }
     }
diff --git a/libavformat/silkdec.c b/libavformat/silkdec.c
new file mode 100644
index 0000000000..162d11d661
--- /dev/null
+++ b/libavformat/silkdec.c
@@ -0,0 +1,59 @@
+
+#include "libavcodec/codec_id.h"
+#ifndef AV_CODEC_ID_SILK
+#define AV_CODEC_ID_SILK ((enum AVCodecID)0x16000)
+#endif
+#include "libavformat/avformat.h"
+#include "libavformat/internal.h"
+
+#define SILK_HEADER_MAGIC "\x02#!SILK_V3"
+#define SILK_HEADER_SIZE 9
+
+static int silk_probe(const AVProbeData *p) {
+    if (p->buf_size < SILK_HEADER_SIZE)
+        return 0;
+    if (!memcmp(p->buf, SILK_HEADER_MAGIC, SILK_HEADER_SIZE))
+        return AVPROBE_SCORE_EXTENSION + 1;
+    return 0;
+}
+
+static int silk_read_header(AVFormatContext *s) {
+    AVStream *st = avformat_new_stream(s, NULL);
+    if (!st)
+        return AVERROR(ENOMEM);
+    st->codecpar->codec_type = AVMEDIA_TYPE_AUDIO;
+    st->codecpar->codec_id = AV_CODEC_ID_SILK;
+    st->codecpar->sample_rate = 24000;
+#if defined(AV_CHANNEL_LAYOUT_MONO)
+    st->codecpar->ch_layout = (AVChannelLayout)AV_CHANNEL_LAYOUT_MONO;
+#else
+    av_channel_layout_default(&st->codecpar->ch_layout, 1);
+#endif
+    st->start_time = 0;
+    avpriv_set_pts_info(st, 64, 1, 24000);
+    // 跳过头部
+    avio_seek(s->pb, SILK_HEADER_SIZE, SEEK_SET);
+    return 0;
+}
+
+static int silk_read_packet(AVFormatContext *s, AVPacket *pkt) {
+    int ret = av_get_packet(s->pb, pkt, 4096);
+    if (ret <= 0)
+        return AVERROR_EOF;
+    pkt->stream_index = 0;
+    return 0;
+}
+
+AVInputFormat ff_silk_demuxer = {
+    .name        = "silk",
+    .long_name   = "SILK audio demuxer",
+    .flags       = 0,
+    .extensions  = "silk",
+    .codec_tag   = NULL,
+    .priv_class  = NULL,
+    .mime_type   = "audio/silk",
+    .read_probe  = silk_probe,
+    .read_header = silk_read_header,
+    .read_packet = silk_read_packet,
+    .raw_codec_id = AV_CODEC_ID_SILK,
+};
diff --git a/libavformat/silkenc.c b/libavformat/silkenc.c
new file mode 100644
index 0000000000..ebabf1acbb
--- /dev/null
+++ b/libavformat/silkenc.c
@@ -0,0 +1,41 @@
+#include "libavcodec/codec_id.h"
+#ifndef AV_CODEC_ID_SILK
+#define AV_CODEC_ID_SILK ((enum AVCodecID)0x16000)
+#endif
+// FFmpeg Silk Muxer
+#include "libavformat/avformat.h"
+#include "libavformat/internal.h"
+#include "libavcodec/codec_id.h"
+
+
+static int silk_write_header(AVFormatContext *s) {
+    // 写入 SILK 头部
+    static const uint8_t silk_header[] = {0x02, '#', '!', 'S', 'I', 'L', 'K', '_', 'V', '3'};
+    avio_write(s->pb, silk_header, 9);
+    return 0;
+}
+
+static int silk_write_packet(AVFormatContext *s, AVPacket *pkt) {
+    avio_write(s->pb, pkt->data, pkt->size);
+    return 0;
+}
+
+static int silk_write_trailer(AVFormatContext *s) {
+    return 0;
+}
+
+AVOutputFormat ff_silk_muxer = {
+    .name         = "silk",
+    .long_name    = "SILK audio muxer",
+    .mime_type    = "audio/silk",
+    .extensions   = "silk",
+    .audio_codec  = AV_CODEC_ID_SILK,
+    .video_codec  = AV_CODEC_ID_NONE,
+    .subtitle_codec = AV_CODEC_ID_NONE,
+    .flags        = 0,
+    .codec_tag    = NULL,
+    .priv_class   = NULL,
+    .write_header = silk_write_header,
+    .write_packet = silk_write_packet,
+    .write_trailer = silk_write_trailer,
+};
-- 
2.47.0.windows.2

